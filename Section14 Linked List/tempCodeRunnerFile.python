class Node(object):
    def __init__(self,value=None):
        self.value=value
        self.next=None
class SingleLinkedList(object):
    def __init__(self):
        self.head=None
    # def __iter__(self):
    #     node = self.head
    #     while node:
    #         yield node
    #         node = node.next
    def insert_at_beg(self,value,location):
        n1=Node(value)
        n1.next=self.head
        if self.head==None:
            self.head=n1
        #inserting at the beginning of the linked list
        if location ==  0:
            n1.next=self.head
            self.head=n1
        #inserting at the end of the linked list 
        if location==-1:
            n1.next=None
            self.tail.next=n1
            n1=self.tail
        else:
            try:
                temp_node=self.head
                for i in range(1,location):
                    if i==location-1:
                        prev_node=temp_node
                    temp_node=temp_node.next
                prev_node.next=newNode
                newNode.next=temp_node


            except ValueError( ):
                pass

            tempo_node=self.head
            while tempo_node:
                print(tempo_node.value)
                tempo_node=tempo_node.next

obj=SingleLinkedList()
obj.insert_at_beg(1,0)
obj.insert_at_beg(2,0)

# for i in obj:
#     print(i.value,end="-->")